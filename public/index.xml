<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jamie Afflerbach on Jamie Afflerbach</title>
    <link>/</link>
    <description>Recent content in Jamie Afflerbach on Jamie Afflerbach</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Wed, 20 Apr 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Cumulative Human Impacts</title>
      <link>/project/cumulativehumanimpacts/</link>
      <pubDate>Mon, 24 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/project/cumulativehumanimpacts/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Trade‐offs for data‐limited fisheries when using harvest strategies based on catch‐only models</title>
      <link>/publication/datalimited_mse/</link>
      <pubDate>Wed, 19 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/publication/datalimited_mse/</guid>
      <description></description>
    </item>
    
    <item>
      <title>A pan-Arctic assessment of the status of marine social-ecological systems</title>
      <link>/publication/arctic_ohi/</link>
      <pubDate>Wed, 29 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/publication/arctic_ohi/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Cropping rasters down to size</title>
      <link>/post/cropping-rasters-down-to-size/</link>
      <pubDate>Thu, 26 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/cropping-rasters-down-to-size/</guid>
      <description>&lt;p&gt;&lt;em&gt;This blog post was originally written for &lt;a href=&#34;http://ohi-science.org/news/cropping-rasters-down-to-size&#34;&gt;OHI-Science.org&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A significant portion of my work on the Ocean Health Index (OHI) involves working with &lt;a href=&#34;http://desktop.arcgis.com/en/arcmap/10.3/manage-data/raster-and-images/what-is-raster-data.htm&#34;&gt;raster data&lt;/a&gt;, a specific type of spatial data where values are held in grid cells. The data I work with varies from high resolution, remotely sensed data on &lt;a href=&#34;https://www.nodc.noaa.gov/sog/cortad/&#34;&gt;sea surface temperature&lt;/a&gt; to coarse, modeled data on global &lt;a href=&#34;http://www.seaaroundus.org/data/#/spatial-catch&#34;&gt;fish catch&lt;/a&gt;. When I was working on the &lt;a href=&#34;http://ohi-science.org/ohi-global/&#34;&gt;global assessment&lt;/a&gt;, I dealt with raster data at a global scale.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Examples of raster data used in the Ocean Health Index:&lt;/em&gt; &lt;img src=&#34;/img/example_rasters.png&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now that I am working on a regional assessment in the &lt;a href=&#34;http://www.ohi-northeast.org/&#34;&gt;US Northeast&lt;/a&gt;, I often need to use the same data from the global assessment but cropped to my regional scale. Since I know I am not the only one doing this (we currently have &lt;a href=&#34;http://ohi-science.org/projects/ohi-assessments/&#34;&gt;over 20 OHI+ assessments occurring around the world&lt;/a&gt;), I wanted to share my process for making our global raster layers usable at regional scales.&lt;/p&gt;
&lt;p&gt;To demonstrate how to crop a global raster layer to a regional scale, here are step-by-step instructions you can follow along with on your computer using the programming language R, which we use for OHI assessments. Essentially, we are going to treat a country’s spatial boundaries like a cookie cutter. When we use it on a global mangrove raster layer for the whole world, we will end up with mangrove data only in the shape of the cookie cutter, in a process I’ve named “crop &amp;amp; mask.”&lt;/p&gt;
&lt;p&gt;We will do the following:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Read in a global mangrove dataset&lt;/li&gt;
&lt;li&gt;Select a single country’s spatial boundary from the OHI global region file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;crop&lt;/code&gt; the mangrove data to a &lt;em&gt;bounding box&lt;/em&gt; equal to the extent of the region&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mask&lt;/code&gt; out the mangrove data to retain only the data within region boundaries&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The packages you will need are &lt;a href=&#34;https://cran.r-project.org/web/packages/raster/vignettes/Raster.pdf&#34;&gt;&lt;code&gt;raster&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://r-spatial.github.io/sf/&#34;&gt;&lt;code&gt;sf&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://dplyr.tidyverse.org/&#34;&gt;&lt;code&gt;dplyr&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## load these three packages using the library() function
library(raster)
library(sf)
library(dplyr)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Throughout this post, I’ll use the &lt;code&gt;packagename::function&lt;/code&gt; nomenclature to identify which package functions come from.&lt;/p&gt;
&lt;div id=&#34;load-raster-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Load raster data&lt;/h2&gt;
&lt;p&gt;For this blog, I will use a raster that contains global mangrove data. This file is too large to store on our &lt;a href=&#34;https://github.com/OHI-Science/&#34;&gt;OHI-Science GitHub account&lt;/a&gt;, where most of our OHI data is held. Instead, it is stored on a server at NCEAS and can be downloaded &lt;a href=&#34;https://ohi.nceas.ucsb.edu/data/data/mangrove_2012_mw_km2.tif&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Some important information about this dataset:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a slightly modified version of the “MFW, Mangrove Forest Cover Loss since 2000 in areas with year 2000 Mangrove Forest” dataset from: Hamilton, S. E., &amp;amp; Casey, D. (2016). &lt;a href=&#34;http://faculty.salisbury.edu/~sehamilton/mangroves/index.html&#34;&gt;Creation of a high spatio-temporal resolution global database of continuous mangrove forest cover for the 21st century (CGMFC-21)&lt;/a&gt;. Global Ecology and Biogeography, 25(6), 729-738. &lt;a href=&#34;doi:10.1111/geb.1244&#34; class=&#34;uri&#34;&gt;doi:10.1111/geb.1244&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The raster data is provided at a 30 meter resolution, which is awesome, but it can be difficult to work with due to its large size and time required to process it. To alleviate this problem, we created a ~500 meter resolution raster and converted it to the Mollweide coordinate reference system. The units for these data are area of mangrove per cell in square kilometers. Consequently, summing the raster cells in a region will provide the total area of mangrove forest in km&lt;sup&gt;2&lt;/sup&gt; (cell values range from 0 to 0.274979).&lt;/p&gt;
&lt;p&gt;The R scripts we used to estimate mangrove extent and trend are available from &lt;a href=&#34;https://github.com/OHI-Science/ohiprep/tree/master/globalprep/hab_mangrove/v2015&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;These data could be useful for estimating mangrove cover in regions without local mangrove surveys.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I have downloaded this data onto my personal computer and saved it in a folder called &lt;code&gt;big&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let’s first take a look at the downloaded mangrove data. Since mangroves tend to be limited to coastal regions at tropical latitudes, it is difficult to make sense of this data when visualizing it at a global scale, even when I make all cells black in color. This is also due to the high resolution of the data.&lt;/p&gt;
&lt;p&gt;Can you see the dots!?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## I&amp;#39;ve saved this raster in a folder called `big` on my personal drive. You will need to replace this file path with where the file is located on your own computer.
mangrove &amp;lt;- raster(&amp;#39;/home/afflerbach/big/mangrove_2012_mw_km2.tif&amp;#39;)

##setting plot margins
par(mar = c(0.1, 0.1, 0.1, 0.3))
plot(mangrove, col = &amp;quot;black&amp;quot;, axes = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-26-cropping-rasters-down-to-size_files/figure-html/mangrove-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Fortunately, R gives us some options to explore the data more closely. We can zoom in using &lt;code&gt;raster::select()&lt;/code&gt; to make more sense of the speckles we see currently. The &lt;code&gt;select()&lt;/code&gt; function allows you to select an area on the plot with your cursor. By saving your selection to a variable (in our case &lt;code&gt;s&lt;/code&gt;) you can then plot just that piece of the raster.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/select_mangrove.gif&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;OK that looks more like it!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;load-ohi-global-regions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Load OHI global regions&lt;/h2&gt;
&lt;p&gt;We provide a shapefile of 240 global regions including country exclusive economic zones (EEZ) and high seas regions. You are able to load it and select the country(s) of interest for your analyses. This is useful for anyone that wants to use data provided at the global level, but cropped down to a region of interest. You can download the shapefile &lt;a href=&#34;https://mazu.nceas.ucsb.edu/data/#ohi_regions&#34;&gt;here&lt;/a&gt;. Again, this file is too large to host on GitHub so I will download it onto my personal computer and save it in the &lt;code&gt;big&lt;/code&gt; folder.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/eezs.png&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;Once downloaded, you will have two different regions files, one in a &lt;strong&gt;Mollweide&lt;/strong&gt; projection and one in &lt;strong&gt;WGS84&lt;/strong&gt;. You can select whichever suits your needs. If you need more information on coordinate reference systems see &lt;a href=&#34;https://www.nceas.ucsb.edu/~frazier/RSpatialGuides/OverviewCoordinateReferenceSystems.pdf&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Since the mangrove data is already in a Mollweide projection, we will use the regions file in the same projection, &lt;code&gt;regions_mol&lt;/code&gt;. I am going to use the function &lt;code&gt;st_read()&lt;/code&gt; to load the shapefile. This comes from the &lt;code&gt;sf&lt;/code&gt; package and is a preferred method of loading and working with spatial data as opposed to using &lt;code&gt;readOGR()&lt;/code&gt; from the &lt;code&gt;rgdal&lt;/code&gt; package. The &lt;code&gt;st_read()&lt;/code&gt; function will read in the shapefile as a &lt;strong&gt;simple feature&lt;/strong&gt; object, meaning the spatial information is stored in a dataframe. This allows you to use data wrangling tools such as &lt;code&gt;dplyr&lt;/code&gt; to work with the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## use st_read to read in the global regions shapefile as a simple feature object
regions &amp;lt;- st_read(&amp;quot;/home/afflerbach/big/regions/regions_mol.shp&amp;quot;, quiet = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;regions&lt;/code&gt; object is a simple feature with an attribute table in the form of a dataframe that lists some important variables including the type of region (land or EEZ), name, our OHI three-letter key, and total area.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(regions)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Simple feature collection with 6 features and 7 fields
## geometry type:  MULTIPOLYGON
## dimension:      XY
## bbox:           xmin: 883504 ymin: -1914692 xmax: 16892390 ymax: 458736.6
## epsg (SRID):    NA
## proj4string:    +proj=moll +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs
##   rgn_typ ant_typ rgn_id ant_id             rgn_nam rgn_key      are_km2
## 1     eez     eez      1      1       Cocos Islands     CCK 470116.60060
## 2    land    land      1      1       Cocos Islands     CCK     17.94724
## 3     eez     eez     10     10               Nauru     NRU 310565.14721
## 4    land    land     10     10               Nauru     NRU     22.78557
## 5     eez     eez    100    100 Republique du Congo     COG  39863.59682
## 6    land    land    100    100 Republique du Congo     COG 346305.36416
##                         geometry
## 1 MULTIPOLYGON (((9921659 -14...
## 2 MULTIPOLYGON (((9573533 -15...
## 3 MULTIPOLYGON (((16870313 -1...
## 4 MULTIPOLYGON (((16730962 -6...
## 5 MULTIPOLYGON (((1200387 -62...
## 6 MULTIPOLYGON (((1172410 -55...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s plot the object to make sure what we have is what we expect. With simple features, you need to tell &lt;code&gt;plot()&lt;/code&gt; which column to show, otherwise R will create a plot for every column, which we do not need! Here I am plotting just the &lt;code&gt;rgn_id&lt;/code&gt; column. When plotting an sf object, you need to plot based on column location, and &lt;code&gt;rgn_id&lt;/code&gt; is the third column:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(regions[3])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-26-cropping-rasters-down-to-size_files/figure-html/plot_rgns-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;OK this looks like what we want!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;select-region-of-interest&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Select region of interest&lt;/h2&gt;
&lt;p&gt;For the sake of demonstration, we are going to use Bangladesh as our region of interest. Since we loaded the shapefile as a simple feature object, we can now select Bangladesh using &lt;code&gt;dplyr::filter()&lt;/code&gt;. When we plot our new object, we see there are two distinct polygons included - the land (lime green) and (teal) eez polygons for Bangladesh.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# filter the regions you want:
bangladesh &amp;lt;- regions %&amp;gt;% 
  dplyr::filter(rgn_nam == &amp;quot;Bangladesh&amp;quot;)

plot(bangladesh[1], key.pos = 1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-26-cropping-rasters-down-to-size_files/figure-html/plot_region-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This looks like what we want, so I recommend saving this object with &lt;code&gt;st_write()&lt;/code&gt; to use in other parts of your analysis.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# save the output (saving as an ESRI Shapefile):
sf::write_sf(bangladesh, &amp;quot;data/bangladesh.shp&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;crop-raster-data-to-region-extent&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Crop raster data to region extent&lt;/h2&gt;
&lt;p&gt;Unfortunately, rasters (our mangrove data) do not yet play nicely with simple feature objects (our region shapefile), so we need to convert the &lt;code&gt;bangladesh&lt;/code&gt; object to a &lt;code&gt;SpatialPolygonsDataFrame&lt;/code&gt;. This is done using &lt;code&gt;as()&lt;/code&gt;. You pass your simple feature object - in our case &lt;code&gt;bangladesh&lt;/code&gt; - to &lt;code&gt;as()&lt;/code&gt; and tell it to convert to a &lt;code&gt;Spatial&lt;/code&gt; object. This returns the same polygons but as a &lt;code&gt;SpatialPolygonsDataFrame&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bang_sp &amp;lt;- as(bangladesh, &amp;#39;Spatial&amp;#39;)
bang_sp&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## class       : SpatialPolygonsDataFrame 
## features    : 2 
## extent      : 8265652, 8898467, 2280053, 3246484  (xmin, xmax, ymin, ymax)
## coord. ref. : +proj=moll +lon_0=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0 
## variables   : 7
## names       : rgn_typ, ant_typ, rgn_id, ant_id,    rgn_nam, rgn_key,   are_km2 
## min values  :     eez,     eez,    204,    204, Bangladesh,     BGD, 139812.14 
## max values  :    land,    land,    204,    204, Bangladesh,     BGD,  84563.26&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In a &lt;code&gt;SpatialPolygonsDataFrame&lt;/code&gt;, attribute data is stored as a &lt;code&gt;data.frame&lt;/code&gt; in the data slot, but the actual geometric features are stored in a polygons slot. This structure can be confusing to work with but until the &lt;code&gt;raster&lt;/code&gt; package improves compatibility with &lt;code&gt;sf&lt;/code&gt; objects, it is necessary to use &lt;code&gt;SpatialPolygonsDataFrames&lt;/code&gt; with the &lt;code&gt;raster&lt;/code&gt; package.&lt;/p&gt;
&lt;p&gt;Now we can use &lt;code&gt;bang_sp&lt;/code&gt; to get the mangrove data that we are interested in, which is all mangrove habitat within the borders of Bangladesh. This requires two steps:&lt;br /&gt;
1. &lt;code&gt;raster::crop()&lt;/code&gt;&lt;br /&gt;
2. &lt;code&gt;raster::mask()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;After trial and error I have determined that these two steps, in this order, is the fastest way to get the data we want. By first using the &lt;code&gt;crop()&lt;/code&gt; function, we crop the &lt;code&gt;mangrove&lt;/code&gt; raster dataset to a &lt;em&gt;bounding box&lt;/em&gt; equal to the extent of the &lt;code&gt;bang_sp&lt;/code&gt; object. I think of this as a way to zoom into the dataset so we only see what’s in our region of interest. But this still returns data that falls outside of Bangladesh:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bang_man &amp;lt;- raster::crop(mangrove, bang_sp)
plot(bang_man, axes = FALSE)
plot(bang_sp, add = TRUE, box = FALSE, axes = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-26-cropping-rasters-down-to-size_files/figure-html/crop_mangrove_data-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can see that &lt;code&gt;bang_man&lt;/code&gt; is a scaled down version of the mangrove data, only showing us what mangrove data exists within the &lt;em&gt;bounding box&lt;/em&gt; of the Bangladesh polygon. To remove the data that falls outside of the country boundary, we now need to use &lt;code&gt;raster::mask()&lt;/code&gt;. This function uses a &lt;code&gt;SpatialPolygonsDataFrame&lt;/code&gt; as a “cookie cutter” and keeps only the raster data that falls within the polygon.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bang_man_mask &amp;lt;- raster::mask(bang_man, bang_sp)
plot(bang_man_mask, axes = FALSE)
plot(bang_sp, add = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-04-26-cropping-rasters-down-to-size_files/figure-html/mask-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now that we have the data we want, mangrove data for Bangladesh, we can save this data using &lt;code&gt;writeRaster()&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;writeRaster(bang_man_mask, filename = &amp;quot;bangladesh_mangrove_data.tif&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For a more thorough tutorial on working with raster data see my &lt;a href=&#34;http://jafflerbach.github.io/spatial-analysis-R/&#34;&gt;&lt;em&gt;Intro to Spatial Analysis in R&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy cropping!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Creating a personal website with blogdown</title>
      <link>/talk/blogdown_website/</link>
      <pubDate>Wed, 14 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/talk/blogdown_website/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Visualizing growth in global seafood production</title>
      <link>/post/global_seafood_growth_dataviz/</link>
      <pubDate>Tue, 23 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/global_seafood_growth_dataviz/</guid>
      <description>&lt;p&gt;I’m excited to be part of a new research group - the &lt;a href=&#34;http://www.cart-sci.org/&#34;&gt;Conservation Aquaculture Research Team&lt;/a&gt; at NCEAS. Our group is interested in helping shape the future of &lt;strong&gt;sustainable aquaculture&lt;/strong&gt;. Over the past couple of decades, farmed seafood has grown significantly and is likely to become the dominant source of where we get our fish as global populations increase. I wanted to take a look at this trend over time using data from the &lt;a href=&#34;http://www.fao.org/home/en/&#34;&gt;Food and Agriculture Organization&lt;/a&gt; (FAO). This also gave me the opportunity to play with some of the packages out there that create dynamic visualizations. I’ve used the &lt;a href=&#34;https://plot.ly/ggplot2/getting-started/&#34;&gt;&lt;code&gt;plotly&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/mages/googleVis#googlevis&#34;&gt;&lt;code&gt;googlevis&lt;/code&gt;&lt;/a&gt; R packages to create interactive plots, and the &lt;a href=&#34;https://yihui.name/animation/&#34;&gt;&lt;code&gt;animation&lt;/code&gt;&lt;/a&gt; package to create gifs from raster data (e.g. Sea Surface Temperature over time), but I’ve never created a high-quality dynamic visualization. I know &lt;a href=&#34;https://d3js.org/&#34;&gt;D3.js&lt;/a&gt; is often used to create beautiful figures, but I don’t have the time to learn D3.js (yet) and I figured there &lt;em&gt;had&lt;/em&gt; to be a way to do something fancy in R. And of course, I was right. So this is my process of creating a dynamic visualization with the &lt;a href=&#34;https://github.com/thomasp85/tweenr&#34;&gt;&lt;code&gt;tweenr&lt;/code&gt;&lt;/a&gt; package. ___&lt;/p&gt;
&lt;div id=&#34;installation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;Install and/or load packages:&lt;/p&gt;
&lt;p&gt;I use &lt;code&gt;ggplot2&lt;/code&gt;, &lt;code&gt;gganimate&lt;/code&gt;, &lt;code&gt;ggthemes&lt;/code&gt; anad &lt;code&gt;tweenr&lt;/code&gt; for customizing the figures.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
#devtools::install_github(&amp;quot;dgrtwo/gganimate&amp;quot;)
library(gganimate)
library(tweenr)
library(ggthemes)
library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;data-wrangling&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data wrangling&lt;/h2&gt;
&lt;p&gt;I start with data downloaded from &lt;a href=&#34;http://www.fao.org/fishery/statistics/global-production/en&#34;&gt;FAO’s website&lt;/a&gt;, specifically the “Total Production” dataset CSV. One problem with using this dataset to understand how seafood production from wild capture (i.e. wild-caught from the ocean) and aquaculture (farmed, not wild) has grown over time, is that this data does not differentiate between fish caught for consumption versus non-consumption (e.g. fish used for feed).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#this data identifies aquaculture vs wild capture production  
source &amp;lt;- read_csv(&amp;quot;https://raw.githubusercontent.com/CART-sci/storymap/master/data/GlobalProuction_2017.1.1/CL_FI_PRODUCTION_SOURCE.csv&amp;quot;)
    
#this is the time series data for global production (does not discern b/w seafood and nonseafood)  
fao &amp;lt;- read_csv(&amp;quot;https://raw.githubusercontent.com/CART-sci/storymap/master/data/GlobalProuction_2017.1.1/TS_FI_PRODUCTION.csv&amp;quot;)
    
##species info  
spp &amp;lt;- read_csv(&amp;quot;https://raw.githubusercontent.com/CART-sci/storymap/master/data/GlobalProuction_2017.1.1/CL_FI_SPECIES_GROUPS.csv&amp;quot;) %&amp;gt;%
  mutate(Species = `3Alpha_Code`) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By using a second dataset on global food supply of seafood, I can calculate the amount of fish caught for consumption. Why not only use this dataset? Because this one does not differentiate between wild capture and aquaculture.&lt;/p&gt;
&lt;p&gt;If you’re interested in the data I used, here is a screenshot of the manual query on FAOSTAT.&lt;/p&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/fao_query.png&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;I am still hopeful that someone, somewhere will create an FAO R package that lets me query all of their data directly from R. In the meantime, I’ll wrangle these two datasets together as best I can.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#read in the seafood data queried from FAOSTAT and get totals per year  
seafood &amp;lt;- read_csv(&amp;quot;https://raw.githubusercontent.com/CART-sci/storymap/master/data/FAOSTAT_data_12-21-2017.csv&amp;quot;) %&amp;gt;%
  group_by(Year) %&amp;gt;%
  summarize(sf_tons = sum(Value))&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;calculate-annual-capture-and-aquaculture-production&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Calculate annual capture and aquaculture production&lt;/h3&gt;
&lt;p&gt;Since no dataset from FAO has exactly what I want, I can take the seafood dataset, calculate total production (tons) per year, and then remove the total aquaculture production for each year calculated from the &lt;code&gt;fao&lt;/code&gt; dataset. Then I have wild capture seafood per year (from the &lt;code&gt;seafood&lt;/code&gt; dataset), and aquaculture production per year (from the &lt;code&gt;fao&lt;/code&gt; dataset).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data &amp;lt;- fao %&amp;gt;%
  left_join(spp) %&amp;gt;%
  mutate(source = 
           case_when(
             Source %in% c(1,2,3,5) ~ &amp;quot;Aquaculture&amp;quot;,
             Source == 4 ~ &amp;quot;Wild_Capture&amp;quot;
           )) %&amp;gt;%
  filter(Major_Group != &amp;quot;PLANTAE AQUATICAE&amp;quot;) %&amp;gt;% #removing aquatic plants  
  mutate(source = as.factor(source)) %&amp;gt;%         #doing this for tweenr...still don&amp;#39;t know why we need to  
  group_by(source, Year) %&amp;gt;%
  summarize(tons = sum(Quantity, na.rm = T)/1000000) %&amp;gt;%
  filter(Year &amp;gt; 1989) %&amp;gt;%                        #only interested in showing 1990 onwards  
  spread(source, tons) %&amp;gt;%
  left_join(seafood, by = &amp;quot;Year&amp;quot;) %&amp;gt;%
  mutate(Wild_for_food = (sf_tons/1000000) - Aquaculture) %&amp;gt;% #subtract aquaculture from seafood series to get wild capture for seafood  
  filter(!is.na(Wild_for_food)) %&amp;gt;%
  select(Year, Aquaculture, Wild_for_food)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;forecast-production-values&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Forecast production values&lt;/h3&gt;
&lt;p&gt;The data only goes to 2013, but I want to include forecasted growth of these two sectors. The 2016 &lt;a href=&#34;http://www.fao.org/publications/sofia/2016/en/&#34;&gt;State of the Worlds Fisheries and Aquaculture report&lt;/a&gt; projects a 39% growth in Aquaculture production and just a 1% growth in Wild Capture. To make this easy, I simply used the 2013 production values and set the 2025 values to 139% and 101% of those values.&lt;/p&gt;
&lt;p&gt;I create two new dataframes, one for all years 2014-2024 with two years full of &lt;code&gt;NA&lt;/code&gt;, one for Aquaculture and one for &lt;code&gt;Wild_for_food&lt;/code&gt; (Wild Capture). The second is a one row dataframe for the year 2025 with the &lt;code&gt;Aquaculture&lt;/code&gt; and &lt;code&gt;Wild_fod_food&lt;/code&gt; values equal to 139% and 101% of their 2013 values respectively. Using the &lt;code&gt;zoo::na.approx()&lt;/code&gt; function I simply do a linear interpolation of production values between 2013 and 2025.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#forecast forward to 2025
#Projected 1% of growth in wild capture by 2025
#projected 39% for aquaculture
    
yrs &amp;lt;- data.frame(Year = 2014:2024,
                  Aquaculture = NA,
                  Wild_for_food = NA)
    
data_2025 &amp;lt;- data.frame(Year = 2025,
                        Aquaculture = 1.39*last(data$Aquaculture),
                        Wild_for_food = 1.01*last(data$Wild_for_food))
    
plot_data &amp;lt;- data %&amp;gt;%
  rbind(yrs, data_2025) %&amp;gt;%
  mutate(Aquaculture = zoo::na.approx(.$Aquaculture),
         Wild_for_food = zoo::na.approx(.$Wild_for_food)) %&amp;gt;%
  gather(source, tons, Aquaculture, Wild_for_food)%&amp;gt;%
  mutate(ease = &amp;quot;linear&amp;quot;,
         x = Year) %&amp;gt;%
  rename(y = tons,
         id = source,
         time = Year)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice I renamed the columns to &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;, and &lt;code&gt;time&lt;/code&gt;. This is for use in the next section with &lt;code&gt;tweenr&lt;/code&gt;. The &lt;code&gt;x&lt;/code&gt; column identifies what I want on the x-axis (years), &lt;code&gt;y&lt;/code&gt; identifies the y-axis (tons), &lt;code&gt;id&lt;/code&gt; identifies the different series for plotting (Aquaculture or Wild_for_food) and &lt;code&gt;time&lt;/code&gt; is used to tell &lt;code&gt;tween_elements()&lt;/code&gt; what the different time points will be for interpolation. The &lt;code&gt;ease&lt;/code&gt; column will tell &lt;code&gt;tween_elements()&lt;/code&gt; what the easing (or interpolation) function will be. In this case, I just want a linear interpolation between my datapoints.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;making-the-plot&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Making the plot&lt;/h2&gt;
&lt;p&gt;Here’s how I went from creating a static &lt;code&gt;ggplot&lt;/code&gt; to animating with &lt;code&gt;gganimate&lt;/code&gt; then improving it with &lt;code&gt;tweenr&lt;/code&gt;&lt;/p&gt;
&lt;div id=&#34;static-ggplot&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Static ggplot&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;static_plot &amp;lt;- ggplot(plot_data, aes(x = time, y = y)) +
  geom_line(aes(color = id), show.legend = F) +
  labs(x = &amp;quot;Year&amp;quot;,
       y = &amp;quot;Seafood Production (million tonnes)&amp;quot;) +
  theme_minimal()
    
static_plot&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/static.png&#34; /&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;animate-with-gganimate&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Animate with &lt;code&gt;gganimate()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;You can animate a static ggplot just with the &lt;a href=&#34;https://github.com/dgrtwo/gganimate&#34;&gt;&lt;code&gt;gganimate()&lt;/code&gt; package&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dynam_plot &amp;lt;- ggplot(plot_data, aes(x = x, y = y, cumulative = TRUE, frame = time)) +
  geom_line(aes(color = id), show.legend = F) +
  labs(x = &amp;quot;Year&amp;quot;,
       y = &amp;quot;Seafood Production (million tonnes)&amp;quot;) +
  theme_hc() +
  scale_y_continuous(breaks = seq(0, 100, by = 25)) +
  scale_color_manual(values = c(&amp;quot;#24757A&amp;quot;, &amp;quot;#7FBAC0&amp;quot;)) +
  ylim(0, 100) +
  theme_hc() 
      
gganimate(dynam_plot, filename = &amp;quot;fao_gganimate.gif&amp;quot;, title_frame = F)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/fao_gganimate.gif&#34; /&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;smooth-animation-with-tweenr-ggplot-gganimate&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Smooth animation with &lt;code&gt;tweenr&lt;/code&gt; + &lt;code&gt;ggplot&lt;/code&gt; + &lt;code&gt;gganimate&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;To make the animation smoother, I’m using the tweenr package. Specifically, the &lt;code&gt;tween_elements()&lt;/code&gt; function creates a new dataframe with interpolated points between your datapoints (called “tweens” !) allowing &lt;code&gt;gganimate&lt;/code&gt; to plot all these points one after the other, resulting in a smooth dynamic visualization. The &lt;code&gt;nframes&lt;/code&gt; argument allows you to set how many total timepoints you want. I played around with this and chose 100 because I thought it gave the right speed. The more &lt;code&gt;nframes&lt;/code&gt;, the more points to plot and thus the slower the visualization. I suggest just playing with this argument until the animation looks right to you.&lt;/p&gt;
&lt;p&gt;After creating the new dataframe with &lt;code&gt;tween_elements()&lt;/code&gt; you use &lt;code&gt;ggplot&lt;/code&gt; and &lt;code&gt;gganimate&lt;/code&gt; to create the final animation.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data_tween &amp;lt;- plot_data %&amp;gt;%
  tween_elements(., &amp;quot;time&amp;quot;, &amp;quot;id&amp;quot;, &amp;quot;ease&amp;quot;, nframes = 100) %&amp;gt;%   #using tweenr!
  mutate(year = round(time), id = .group) %&amp;gt;%
  left_join(plot_data)
    
tween_plot &amp;lt;- ggplot(data_tween, aes(x = x, y = y, frame = .frame, color = id)) +
  geom_path(aes(group = id, cumulative = T), size = 1, show.legend = F) +
  xlab(&amp;quot;&amp;quot;) +
  ylab(&amp;quot;Seafood Production (million tonnes)&amp;quot;) +
  scale_y_continuous(breaks = seq(0, 100, by = 25)) +
  scale_color_manual(values = c(&amp;quot;#24757A&amp;quot;, &amp;quot;#7FBAC0&amp;quot;)) +
  ylim(0, 100) +
  theme_hc() +
  theme(axis.title.y = element_text(size=14),
        axis.text.y = element_text( size=12),
        axis.text.x = element_text(size = 12)) +
  annotate(geom = &amp;quot;text&amp;quot;, x = 1994, y = 29, label = &amp;quot;Aquaculture&amp;quot;, 
           cex = 6, angle = 22, fontface = &amp;quot;bold&amp;quot;, color = &amp;quot;#24757A&amp;quot;) +
  annotate(geom = &amp;quot;text&amp;quot;, x = 1994, y = 70, label = &amp;quot;Wild Capture&amp;quot;, 
           cex = 6, fontface = &amp;quot;bold&amp;quot;, color = &amp;quot;#7FBAC0&amp;quot;) +
  geom_segment(aes(x=2015,xend=2020, y=88, yend=88),arrow=arrow(length=unit(0.2,&amp;quot;cm&amp;quot;)),show.legend=F, color = &amp;quot;darkgray&amp;quot;) +
  annotate(geom = &amp;quot;text&amp;quot;, x = 2013, y = 88, label = &amp;quot;Estimated \nfuture growth&amp;quot;, color= &amp;quot;darkgray&amp;quot;, fontface = &amp;quot;bold&amp;quot;, cex = 4.5, angle = 90) +
  geom_vline(xintercept=c(2015), linetype=&amp;quot;dotted&amp;quot;); tween_plot
    
gganimate(tween_plot, title_frame = FALSE, interval = 0.05)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;
&lt;img src=&#34;/img/fao_aq_capture_fig.gif&#34; /&gt;

&lt;/div&gt;
&lt;p&gt;I spent a lot of time messing with the text sizes, colors, label placement, etc. I also learned how to add an arrow (thanks, &lt;code&gt;geom_segment()&lt;/code&gt;). While I could keep tweaking this forever, I think it’s good enough as is. The whole process of learning how to use &lt;code&gt;tweenr&lt;/code&gt; took me just a couple hours and I’m excited for the next opportunity to make something like this!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Cumulative human impacts in the Bering Strait Region</title>
      <link>/publication/bsr/</link>
      <pubDate>Tue, 31 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/publication/bsr/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Data-Limited Fisheries</title>
      <link>/project/datalimited/</link>
      <pubDate>Wed, 16 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>/project/datalimited/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Ocean Health Index</title>
      <link>/project/oceanhealthindex/</link>
      <pubDate>Wed, 16 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>/project/oceanhealthindex/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Drivers and implications of change in global ocean health over the past five years</title>
      <link>/publication/ohi_fiveyears_plos/</link>
      <pubDate>Wed, 05 Jul 2017 00:00:00 +0000</pubDate>
      
      <guid>/publication/ohi_fiveyears_plos/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Our path to better science in less time using open data science tools</title>
      <link>/publication/path_to_science_ecoevo/</link>
      <pubDate>Tue, 23 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/publication/path_to_science_ecoevo/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Aligning marine species range data to better serve science and conservation</title>
      <link>/publication/iucn-aquamaps/</link>
      <pubDate>Wed, 03 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/publication/iucn-aquamaps/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Ocean Health Index in the US Northeast</title>
      <link>/talk/ohi-ne/</link>
      <pubDate>Tue, 02 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/talk/ohi-ne/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Applying a New Ensemble Approach to Estimating Stock Status of Marine Fisheries Around the World</title>
      <link>/publication/fish_status_cons_letters_2017/</link>
      <pubDate>Wed, 12 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>/publication/fish_status_cons_letters_2017/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Improving estimates of population status and trend with superensemble models</title>
      <link>/publication/ensembles_fish_and_fisheries_2017/</link>
      <pubDate>Mon, 30 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/publication/ensembles_fish_and_fisheries_2017/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
